/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MintVerifier,
  MintVerifierInterface,
} from "../../contracts/MintVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "plonkVerifier_",
        type: "address",
      },
      {
        internalType: "address",
        name: "rollup_",
        type: "address",
      },
      {
        internalType: "address",
        name: "l2ScrollMessenger_",
        type: "address",
      },
      {
        internalType: "address",
        name: "minter_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct ICommon.MintClaim[]",
        name: "claims",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "depositTreeRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "eligibleTreeRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "lastClaimHash",
            type: "bytes32",
          },
        ],
        internalType: "struct MintVerifier.ClaimPublicInputs",
        name: "publicInputs",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "claimTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositTreeRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "eligibleTreeRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rollup",
    outputs: [
      {
        internalType: "contract IRollup",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "eligibleTreeRoot_",
        type: "bytes32",
      },
    ],
    name: "setTreeRoots",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract IPlonkVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001a1538038062001a158339818101604052810190620000379190620002fb565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a491906200037e565b60405180910390fd5b620000be81620001cd60201b60201c565b5083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200039b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002c38262000296565b9050919050565b620002d581620002b6565b8114620002e157600080fd5b50565b600081519050620002f581620002ca565b92915050565b6000806000806080858703121562000318576200031762000291565b5b60006200032887828801620002e4565b94505060206200033b87828801620002e4565b93505060406200034e87828801620002e4565b92505060606200036187828801620002e4565b91505092959194509250565b6200037881620002b6565b82525050565b60006020820190506200039560008301846200036d565b92915050565b61166a80620003ab6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063715018a611610066578063715018a6146101355780638da5cb5b1461013f578063cb23bcb51461015d578063def496a81461017b578063f2fde38b146101995761009e565b806307546172146100a35780631d9a07b9146100c15780632b7ac3f3146100df5780633fa721f5146100fd578063550ca5f814610119575b600080fd5b6100ab6101b5565b6040516100b89190610a25565b60405180910390f35b6100c96101db565b6040516100d69190610a59565b60405180910390f35b6100e76101e1565b6040516100f49190610ad3565b60405180910390f35b61011760048036038101906101129190610b2e565b610207565b005b610133600480360381019061012e9190610e3e565b6102b0565b005b61013d61050b565b005b61014761051f565b6040516101549190610a25565b60405180910390f35b610165610548565b6040516101729190610eef565b60405180910390f35b61018361056e565b6040516101909190610a59565b60405180910390f35b6101b360048036038101906101ae9190610f0a565b610574565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61020f6105fa565b80600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d9a07b96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a79190610f4c565b60068190555050565b60006102bb85610681565b905083604001518114610303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fa90610fd6565b60405180910390fd5b600084600001518560200151866040015160405160200161032693929190611017565b6040516020818303038152906040528051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637e4f7a8a868661038986610708565b6040518463ffffffff1660e01b81526004016103a79392919061115f565b602060405180830381865afa1580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e891906111d0565b90508061042a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042190611249565b60405180910390fd5b60005b87518110156104f857600088828151811061044b5761044a611269565b5b60200260200101519050600760008260200151815260200190815260200160002060009054906101000a900460ff16156104ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b1906112e4565b60405180910390fd5b6001600760008360200151815260200190815260200160002060006101000a81548160ff02191690831515021790555050808060010191505061042d565b50610502876107b3565b50505050505050565b6105136105fa565b61051d6000610918565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b61057c6105fa565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105ee5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016105e59190610a25565b60405180910390fd5b6105f781610918565b50565b6106026109dc565b73ffffffffffffffffffffffffffffffffffffffff1661062061051f565b73ffffffffffffffffffffffffffffffffffffffff161461067f576106436109dc565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016106769190610a25565b60405180910390fd5b565b6000806000801b905060005b83518110156106fe5760008482815181106106ab576106aa611269565b5b60200260200101519050828160000151826020015183604001516040516020016106d8949392919061136d565b60405160208183030381529060405280519060200120925050808060010191505061068d565b5080915050919050565b60606000600867ffffffffffffffff81111561072757610726610b71565b5b6040519080825280602002602001820160405280156107555781602001602082028036833780820191505090505b50905060005b60088110156107a95760208161077191906113ea565b84901b60e01c63ffffffff168282815181106107905761078f611269565b5b602002602001018181525050808060010191505061075b565b5080915050919050565b6000807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90506000633fa54ecb60e01b846040516024016107f4919061153b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f7b157784600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168685876108c06109dc565b6040518763ffffffff1660e01b81526004016108e09594939291906115da565b6000604051808303818588803b1580156108f957600080fd5b505af115801561090d573d6000803e3d6000fd5b505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a0f826109e4565b9050919050565b610a1f81610a04565b82525050565b6000602082019050610a3a6000830184610a16565b92915050565b6000819050919050565b610a5381610a40565b82525050565b6000602082019050610a6e6000830184610a4a565b92915050565b6000819050919050565b6000610a99610a94610a8f846109e4565b610a74565b6109e4565b9050919050565b6000610aab82610a7e565b9050919050565b6000610abd82610aa0565b9050919050565b610acd81610ab2565b82525050565b6000602082019050610ae86000830184610ac4565b92915050565b6000604051905090565b600080fd5b600080fd5b610b0b81610a40565b8114610b1657600080fd5b50565b600081359050610b2881610b02565b92915050565b600060208284031215610b4457610b43610af8565b5b6000610b5284828501610b19565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ba982610b60565b810181811067ffffffffffffffff82111715610bc857610bc7610b71565b5b80604052505050565b6000610bdb610aee565b9050610be78282610ba0565b919050565b600067ffffffffffffffff821115610c0757610c06610b71565b5b602082029050602081019050919050565b600080fd5b600080fd5b610c2b81610a04565b8114610c3657600080fd5b50565b600081359050610c4881610c22565b92915050565b6000819050919050565b610c6181610c4e565b8114610c6c57600080fd5b50565b600081359050610c7e81610c58565b92915050565b600060608284031215610c9a57610c99610c1d565b5b610ca46060610bd1565b90506000610cb484828501610c39565b6000830152506020610cc884828501610b19565b6020830152506040610cdc84828501610c6f565b60408301525092915050565b6000610cfb610cf684610bec565b610bd1565b90508083825260208201905060608402830185811115610d1e57610d1d610c18565b5b835b81811015610d475780610d338882610c84565b845260208401935050606081019050610d20565b5050509392505050565b600082601f830112610d6657610d65610b5b565b5b8135610d76848260208601610ce8565b91505092915050565b600060608284031215610d9557610d94610c1d565b5b610d9f6060610bd1565b90506000610daf84828501610b19565b6000830152506020610dc384828501610b19565b6020830152506040610dd784828501610b19565b60408301525092915050565b600080fd5b60008083601f840112610dfe57610dfd610b5b565b5b8235905067ffffffffffffffff811115610e1b57610e1a610de3565b5b602083019150836001820283011115610e3757610e36610c18565b5b9250929050565b60008060008060a08587031215610e5857610e57610af8565b5b600085013567ffffffffffffffff811115610e7657610e75610afd565b5b610e8287828801610d51565b9450506020610e9387828801610d7f565b935050608085013567ffffffffffffffff811115610eb457610eb3610afd565b5b610ec087828801610de8565b925092505092959194509250565b6000610ed982610aa0565b9050919050565b610ee981610ece565b82525050565b6000602082019050610f046000830184610ee0565b92915050565b600060208284031215610f2057610f1f610af8565b5b6000610f2e84828501610c39565b91505092915050565b600081519050610f4681610b02565b92915050565b600060208284031215610f6257610f61610af8565b5b6000610f7084828501610f37565b91505092915050565b600082825260208201905092915050565b7f496e76616c6964206c61737420636c61696d2068617368000000000000000000600082015250565b6000610fc0601783610f79565b9150610fcb82610f8a565b602082019050919050565b60006020820190508181036000830152610fef81610fb3565b9050919050565b6000819050919050565b61101161100c82610a40565b610ff6565b82525050565b60006110238286611000565b6020820191506110338285611000565b6020820191506110438284611000565b602082019150819050949350505050565b600082825260208201905092915050565b82818337600083830152505050565b60006110808385611054565b935061108d838584611065565b61109683610b60565b840190509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6110d681610c4e565b82525050565b60006110e883836110cd565b60208301905092915050565b6000602082019050919050565b600061110c826110a1565b61111681856110ac565b9350611121836110bd565b8060005b8381101561115257815161113988826110dc565b9750611144836110f4565b925050600181019050611125565b5085935050505092915050565b6000604082019050818103600083015261117a818587611074565b9050818103602083015261118e8184611101565b9050949350505050565b60008115159050919050565b6111ad81611198565b81146111b857600080fd5b50565b6000815190506111ca816111a4565b92915050565b6000602082840312156111e6576111e5610af8565b5b60006111f4848285016111bb565b91505092915050565b7f496e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b6000611233600d83610f79565b915061123e826111fd565b602082019050919050565b6000602082019050818103600083015261126281611226565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e756c6c696669657220616c7265616479207573656400000000000000000000600082015250565b60006112ce601683610f79565b91506112d982611298565b602082019050919050565b600060208201905081810360008301526112fd816112c1565b9050919050565b60008160601b9050919050565b600061131c82611304565b9050919050565b600061132e82611311565b9050919050565b61134661134182610a04565b611323565b82525050565b6000819050919050565b61136761136282610c4e565b61134c565b82525050565b60006113798287611000565b6020820191506113898286611335565b6014820191506113998285611000565b6020820191506113a98284611356565b60208201915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113f582610c4e565b915061140083610c4e565b925082820261140e81610c4e565b91508282048414831517611425576114246113bb565b5b5092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61146181610a04565b82525050565b61147081610a40565b82525050565b60608201600082015161148c6000850182611458565b50602082015161149f6020850182611467565b5060408201516114b260408501826110cd565b50505050565b60006114c48383611476565b60608301905092915050565b6000602082019050919050565b60006114e88261142c565b6114f28185611437565b93506114fd83611448565b8060005b8381101561152e57815161151588826114b8565b9750611520836114d0565b925050600181019050611501565b5085935050505092915050565b6000602082019050818103600083015261155581846114dd565b905092915050565b61156681610c4e565b82525050565b600081519050919050565b60005b8381101561159557808201518184015260208101905061157a565b60008484015250505050565b60006115ac8261156c565b6115b68185611054565b93506115c6818560208601611577565b6115cf81610b60565b840191505092915050565b600060a0820190506115ef6000830188610a16565b6115fc602083018761155d565b818103604083015261160e81866115a1565b905061161d606083018561155d565b61162a6080830184610a16565b969550505050505056fea2646970667358221220369dba55c16e9d26aa96c53e62e43180862459b38dca740054b4e041fdcbb6c364736f6c63430008180033";

type MintVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MintVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MintVerifier__factory extends ContractFactory {
  constructor(...args: MintVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    plonkVerifier_: AddressLike,
    rollup_: AddressLike,
    l2ScrollMessenger_: AddressLike,
    minter_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      plonkVerifier_,
      rollup_,
      l2ScrollMessenger_,
      minter_,
      overrides || {}
    );
  }
  override deploy(
    plonkVerifier_: AddressLike,
    rollup_: AddressLike,
    l2ScrollMessenger_: AddressLike,
    minter_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      plonkVerifier_,
      rollup_,
      l2ScrollMessenger_,
      minter_,
      overrides || {}
    ) as Promise<
      MintVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MintVerifier__factory {
    return super.connect(runner) as MintVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MintVerifierInterface {
    return new Interface(_abi) as MintVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MintVerifier {
    return new Contract(address, _abi, runner) as unknown as MintVerifier;
  }
}
