/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Utils__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IL1ScrollMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1ScrollMessenger__factory>;
    getContractFactory(
      name: "IL2ScrollMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2ScrollMessenger__factory>;
    getContractFactory(
      name: "IScrollMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IScrollMessenger__factory>;
    getContractFactory(
      name: "Deposit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Deposit__factory>;
    getContractFactory(
      name: "Int0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Int0__factory>;
    getContractFactory(
      name: "Int1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Int1__factory>;
    getContractFactory(
      name: "IInt0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInt0__factory>;
    getContractFactory(
      name: "IInt1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInt1__factory>;
    getContractFactory(
      name: "IINTMAXToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IINTMAXToken__factory>;
    getContractFactory(
      name: "IMinterV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinterV1__factory>;
    getContractFactory(
      name: "IPlonkVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPlonkVerifier__factory>;
    getContractFactory(
      name: "IRollup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRollup__factory>;
    getContractFactory(
      name: "DepositQueueLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositQueueLib__factory>;
    getContractFactory(
      name: "DepositTreeLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositTreeLib__factory>;
    getContractFactory(
      name: "MinterV0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinterV0__factory>;
    getContractFactory(
      name: "MinterV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinterV1__factory>;
    getContractFactory(
      name: "MintVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintVerifier__factory>;
    getContractFactory(
      name: "ClaimPlonkVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimPlonkVerifier__factory>;
    getContractFactory(
      name: "WithdrawalPlonkVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithdrawalPlonkVerifier__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IBeacon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Utils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Utils>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IL1ScrollMessenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1ScrollMessenger>;
    getContractAt(
      name: "IL2ScrollMessenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2ScrollMessenger>;
    getContractAt(
      name: "IScrollMessenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IScrollMessenger>;
    getContractAt(
      name: "Deposit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Deposit>;
    getContractAt(
      name: "Int0",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Int0>;
    getContractAt(
      name: "Int1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Int1>;
    getContractAt(
      name: "IInt0",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IInt0>;
    getContractAt(
      name: "IInt1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IInt1>;
    getContractAt(
      name: "IINTMAXToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IINTMAXToken>;
    getContractAt(
      name: "IMinterV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinterV1>;
    getContractAt(
      name: "IPlonkVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPlonkVerifier>;
    getContractAt(
      name: "IRollup",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRollup>;
    getContractAt(
      name: "DepositQueueLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositQueueLib>;
    getContractAt(
      name: "DepositTreeLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositTreeLib>;
    getContractAt(
      name: "MinterV0",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MinterV0>;
    getContractAt(
      name: "MinterV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MinterV1>;
    getContractAt(
      name: "MintVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MintVerifier>;
    getContractAt(
      name: "ClaimPlonkVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimPlonkVerifier>;
    getContractAt(
      name: "WithdrawalPlonkVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WithdrawalPlonkVerifier>;

    deployContract(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IL1ScrollMessenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL1ScrollMessenger>;
    deployContract(
      name: "IL2ScrollMessenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2ScrollMessenger>;
    deployContract(
      name: "IScrollMessenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IScrollMessenger>;
    deployContract(
      name: "Deposit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Deposit>;
    deployContract(
      name: "Int0",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Int0>;
    deployContract(
      name: "Int1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Int1>;
    deployContract(
      name: "IInt0",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInt0>;
    deployContract(
      name: "IInt1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInt1>;
    deployContract(
      name: "IINTMAXToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IINTMAXToken>;
    deployContract(
      name: "IMinterV1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinterV1>;
    deployContract(
      name: "IPlonkVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPlonkVerifier>;
    deployContract(
      name: "IRollup",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRollup>;
    deployContract(
      name: "DepositQueueLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DepositQueueLib>;
    deployContract(
      name: "DepositTreeLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DepositTreeLib>;
    deployContract(
      name: "MinterV0",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MinterV0>;
    deployContract(
      name: "MinterV1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MinterV1>;
    deployContract(
      name: "MintVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintVerifier>;
    deployContract(
      name: "ClaimPlonkVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClaimPlonkVerifier>;
    deployContract(
      name: "WithdrawalPlonkVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithdrawalPlonkVerifier>;

    deployContract(
      name: "AccessControlUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1822Proxiable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IBeacon",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Utils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IL1ScrollMessenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL1ScrollMessenger>;
    deployContract(
      name: "IL2ScrollMessenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2ScrollMessenger>;
    deployContract(
      name: "IScrollMessenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IScrollMessenger>;
    deployContract(
      name: "Deposit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Deposit>;
    deployContract(
      name: "Int0",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Int0>;
    deployContract(
      name: "Int1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Int1>;
    deployContract(
      name: "IInt0",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInt0>;
    deployContract(
      name: "IInt1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInt1>;
    deployContract(
      name: "IINTMAXToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IINTMAXToken>;
    deployContract(
      name: "IMinterV1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinterV1>;
    deployContract(
      name: "IPlonkVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPlonkVerifier>;
    deployContract(
      name: "IRollup",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRollup>;
    deployContract(
      name: "DepositQueueLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DepositQueueLib>;
    deployContract(
      name: "DepositTreeLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DepositTreeLib>;
    deployContract(
      name: "MinterV0",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MinterV0>;
    deployContract(
      name: "MinterV1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MinterV1>;
    deployContract(
      name: "MintVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintVerifier>;
    deployContract(
      name: "ClaimPlonkVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClaimPlonkVerifier>;
    deployContract(
      name: "WithdrawalPlonkVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithdrawalPlonkVerifier>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
