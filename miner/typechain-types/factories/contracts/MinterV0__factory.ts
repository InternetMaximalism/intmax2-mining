/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MinterV0, MinterV0Interface } from "../../contracts/MinterV0";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "plonkVerifier_",
        type: "address",
      },
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "address",
        name: "int0_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct MinterV0.MintClaim[]",
        name: "claims",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "depositTreeRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "eligibleTreeRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "lastClaimHash",
            type: "bytes32",
          },
        ],
        internalType: "struct MinterV0.ClaimPublicInputs",
        name: "publicInputs",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "claimTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositTreeRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "eligibleTreeRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "int0",
    outputs: [
      {
        internalType: "contract IInt0",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "eligibleTreeRoot_",
        type: "bytes32",
      },
    ],
    name: "setTreeRoots",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IINTMAXToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract IPlonkVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001850380380620018508339818101604052810190620000379190620002b9565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a4919062000326565b60405180910390fd5b620000be816200018b60201b60201c565b5082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000343565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002818262000254565b9050919050565b620002938162000274565b81146200029f57600080fd5b50565b600081519050620002b38162000288565b92915050565b600080600060608486031215620002d557620002d46200024f565b5b6000620002e586828701620002a2565b9350506020620002f886828701620002a2565b92505060406200030b86828701620002a2565b9150509250925092565b620003208162000274565b82525050565b60006020820190506200033d600083018462000315565b92915050565b6114fd80620003536000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a61461012c5780638da5cb5b14610136578063def496a814610154578063e61be5b514610172578063f2fde38b14610190578063fc0c546a146101ac576100a9565b80631249c58b146100ae5780631d9a07b9146100b85780632b7ac3f3146100d65780633fa721f5146100f4578063550ca5f814610110575b600080fd5b6100b66101ca565b005b6100c0610261565b6040516100cd9190610a24565b60405180910390f35b6100de610267565b6040516100eb9190610abe565b60405180910390f35b61010e60048036038101906101099190610b19565b61028d565b005b61012a60048036038101906101259190610e3b565b610336565b005b6101346105c5565b005b61013e6105d9565b60405161014b9190610eda565b60405180910390f35b61015c610602565b6040516101699190610a24565b60405180910390f35b61017a610608565b6040516101879190610f16565b60405180910390f35b6101aa60048036038101906101a59190610f31565b61062e565b005b6101b46106b4565b6040516101c19190610f7f565b60405180910390f35b6101d26106da565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a627842306040518263ffffffff1660e01b815260040161022d9190610eda565b600060405180830381600087803b15801561024757600080fd5b505af115801561025b573d6000803e3d6000fd5b50505050565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102956106da565b80600481905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ae050476040518163ffffffff1660e01b8152600401602060405180830381865afa158015610309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032d9190610faf565b60058190555050565b600061034185610761565b905083604001518114610389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038090611039565b60405180910390fd5b60008460000151856020015186604001516040516020016103ac9392919061107a565b6040516020818303038152906040528051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637e4f7a8a868661040f866107e8565b6040518463ffffffff1660e01b815260040161042d939291906111c2565b602060405180830381865afa15801561044a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046e9190611233565b9050806104b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a7906112ac565b60405180910390fd5b60005b875181101561057e5760008882815181106104d1576104d06112cc565b5b60200260200101519050600660008260200151815260200190815260200160002060009054906101000a900460ff1615610540576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053790611347565b60405180910390fd5b6001600660008360200151815260200190815260200160002060006101000a81548160ff0219169083151502179055505080806001019150506104b3565b5060005b87518110156105bb576105ae8882815181106105a1576105a06112cc565b5b6020026020010151610893565b8080600101915050610582565b5050505050505050565b6105cd6106da565b6105d7600061093f565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60045481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106366106da565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106a85760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161069f9190610eda565b60405180910390fd5b6106b18161093f565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106e2610a03565b73ffffffffffffffffffffffffffffffffffffffff166107006105d9565b73ffffffffffffffffffffffffffffffffffffffff161461075f57610723610a03565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016107569190610eda565b60405180910390fd5b565b6000806000801b905060005b83518110156107de57600084828151811061078b5761078a6112cc565b5b60200260200101519050828160000151826020015183604001516040516020016107b894939291906113d0565b60405160208183030381529060405280519060200120925050808060010191505061076d565b5080915050919050565b60606000600867ffffffffffffffff81111561080757610806610b5c565b5b6040519080825280602002602001820160405280156108355781602001602082028036833780820191505090505b50905060005b600881101561088957602081610851919061144d565b84901b60e01c63ffffffff168282815181106108705761086f6112cc565b5b602002602001018181525050808060010191505061083b565b5080915050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826000015183604001516040518363ffffffff1660e01b81526004016108f892919061149e565b6020604051808303816000875af1158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b9190611233565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b610a1e81610a0b565b82525050565b6000602082019050610a396000830184610a15565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a84610a7f610a7a84610a3f565b610a5f565b610a3f565b9050919050565b6000610a9682610a69565b9050919050565b6000610aa882610a8b565b9050919050565b610ab881610a9d565b82525050565b6000602082019050610ad36000830184610aaf565b92915050565b6000604051905090565b600080fd5b600080fd5b610af681610a0b565b8114610b0157600080fd5b50565b600081359050610b1381610aed565b92915050565b600060208284031215610b2f57610b2e610ae3565b5b6000610b3d84828501610b04565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b9482610b4b565b810181811067ffffffffffffffff82111715610bb357610bb2610b5c565b5b80604052505050565b6000610bc6610ad9565b9050610bd28282610b8b565b919050565b600067ffffffffffffffff821115610bf257610bf1610b5c565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000610c1882610a3f565b9050919050565b610c2881610c0d565b8114610c3357600080fd5b50565b600081359050610c4581610c1f565b92915050565b6000819050919050565b610c5e81610c4b565b8114610c6957600080fd5b50565b600081359050610c7b81610c55565b92915050565b600060608284031215610c9757610c96610c08565b5b610ca16060610bbc565b90506000610cb184828501610c36565b6000830152506020610cc584828501610b04565b6020830152506040610cd984828501610c6c565b60408301525092915050565b6000610cf8610cf384610bd7565b610bbc565b90508083825260208201905060608402830185811115610d1b57610d1a610c03565b5b835b81811015610d445780610d308882610c81565b845260208401935050606081019050610d1d565b5050509392505050565b600082601f830112610d6357610d62610b46565b5b8135610d73848260208601610ce5565b91505092915050565b600060608284031215610d9257610d91610c08565b5b610d9c6060610bbc565b90506000610dac84828501610b04565b6000830152506020610dc084828501610b04565b6020830152506040610dd484828501610b04565b60408301525092915050565b600080fd5b60008083601f840112610dfb57610dfa610b46565b5b8235905067ffffffffffffffff811115610e1857610e17610de0565b5b602083019150836001820283011115610e3457610e33610c03565b5b9250929050565b60008060008060a08587031215610e5557610e54610ae3565b5b600085013567ffffffffffffffff811115610e7357610e72610ae8565b5b610e7f87828801610d4e565b9450506020610e9087828801610d7c565b935050608085013567ffffffffffffffff811115610eb157610eb0610ae8565b5b610ebd87828801610de5565b925092505092959194509250565b610ed481610c0d565b82525050565b6000602082019050610eef6000830184610ecb565b92915050565b6000610f0082610a8b565b9050919050565b610f1081610ef5565b82525050565b6000602082019050610f2b6000830184610f07565b92915050565b600060208284031215610f4757610f46610ae3565b5b6000610f5584828501610c36565b91505092915050565b6000610f6982610a8b565b9050919050565b610f7981610f5e565b82525050565b6000602082019050610f946000830184610f70565b92915050565b600081519050610fa981610aed565b92915050565b600060208284031215610fc557610fc4610ae3565b5b6000610fd384828501610f9a565b91505092915050565b600082825260208201905092915050565b7f496e76616c6964206c61737420636c61696d2068617368000000000000000000600082015250565b6000611023601783610fdc565b915061102e82610fed565b602082019050919050565b6000602082019050818103600083015261105281611016565b9050919050565b6000819050919050565b61107461106f82610a0b565b611059565b82525050565b60006110868286611063565b6020820191506110968285611063565b6020820191506110a68284611063565b602082019150819050949350505050565b600082825260208201905092915050565b82818337600083830152505050565b60006110e383856110b7565b93506110f08385846110c8565b6110f983610b4b565b840190509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61113981610c4b565b82525050565b600061114b8383611130565b60208301905092915050565b6000602082019050919050565b600061116f82611104565b611179818561110f565b935061118483611120565b8060005b838110156111b557815161119c888261113f565b97506111a783611157565b925050600181019050611188565b5085935050505092915050565b600060408201905081810360008301526111dd8185876110d7565b905081810360208301526111f18184611164565b9050949350505050565b60008115159050919050565b611210816111fb565b811461121b57600080fd5b50565b60008151905061122d81611207565b92915050565b60006020828403121561124957611248610ae3565b5b60006112578482850161121e565b91505092915050565b7f496e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b6000611296600d83610fdc565b91506112a182611260565b602082019050919050565b600060208201905081810360008301526112c581611289565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e756c6c696669657220616c7265616479207573656400000000000000000000600082015250565b6000611331601683610fdc565b915061133c826112fb565b602082019050919050565b6000602082019050818103600083015261136081611324565b9050919050565b60008160601b9050919050565b600061137f82611367565b9050919050565b600061139182611374565b9050919050565b6113a96113a482610c0d565b611386565b82525050565b6000819050919050565b6113ca6113c582610c4b565b6113af565b82525050565b60006113dc8287611063565b6020820191506113ec8286611398565b6014820191506113fc8285611063565b60208201915061140c82846113b9565b60208201915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061145882610c4b565b915061146383610c4b565b925082820261147181610c4b565b915082820484148315176114885761148761141e565b5b5092915050565b61149881610c4b565b82525050565b60006040820190506114b36000830185610ecb565b6114c0602083018461148f565b939250505056fea264697066735822122096442334e1fbb09bc2043c2b64ed0301d43fd2ea587a2cb233bb66642e6c5f2b64736f6c63430008180033";

type MinterV0ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MinterV0ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MinterV0__factory extends ContractFactory {
  constructor(...args: MinterV0ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    plonkVerifier_: AddressLike,
    token_: AddressLike,
    int0_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      plonkVerifier_,
      token_,
      int0_,
      overrides || {}
    );
  }
  override deploy(
    plonkVerifier_: AddressLike,
    token_: AddressLike,
    int0_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      plonkVerifier_,
      token_,
      int0_,
      overrides || {}
    ) as Promise<
      MinterV0 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MinterV0__factory {
    return super.connect(runner) as MinterV0__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MinterV0Interface {
    return new Interface(_abi) as MinterV0Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MinterV0 {
    return new Contract(address, _abi, runner) as unknown as MinterV0;
  }
}
