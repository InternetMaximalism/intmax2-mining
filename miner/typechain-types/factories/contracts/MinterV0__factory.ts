/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MinterV0, MinterV0Interface } from "../../contracts/MinterV0";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "plonkVerifier_",
        type: "address",
      },
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "address",
        name: "int0_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct MinterV0.MintClaim[]",
        name: "claims",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "depositTreeRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "eligibleTreeRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "lastClaimHash",
            type: "bytes32",
          },
        ],
        internalType: "struct MinterV0.ClaimPublicInputs",
        name: "publicInputs",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "claimTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositTreeRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "eligibleTreeRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "int0",
    outputs: [
      {
        internalType: "contract IInt0",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "setDepositTreeRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "eligibleTreeRoot_",
        type: "bytes32",
      },
    ],
    name: "setEligibleTreeRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IINTMAXToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract IPlonkVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200186f3803806200186f8339818101604052810190620000379190620002b9565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a4919062000326565b60405180910390fd5b620000be816200018b60201b60201c565b5082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000343565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002818262000254565b9050919050565b620002938162000274565b81146200029f57600080fd5b50565b600081519050620002b38162000288565b92915050565b600080600060608486031215620002d557620002d46200024f565b5b6000620002e586828701620002a2565b9350506020620002f886828701620002a2565b92505060406200030b86828701620002a2565b9150509250925092565b620003208162000274565b82525050565b60006020820190506200033d600083018462000315565b92915050565b61151c80620003536000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b1461012f578063b51d6ebc1461014d578063def496a814610169578063e61be5b514610187578063f2fde38b146101a5578063fc0c546a146101c1576100b4565b80631249c58b146100b95780631d9a07b9146100c35780632b7ac3f3146100e15780632dbdbc80146100ff578063550ca5f814610109578063715018a614610125575b600080fd5b6100c16101df565b005b6100cb610276565b6040516100d89190610a43565b60405180910390f35b6100e961027c565b6040516100f69190610add565b60405180910390f35b6101076102a2565b005b610123600480360381019061011e9190610e2d565b610343565b005b61012d6105d2565b005b6101376105e6565b6040516101449190610ecc565b60405180910390f35b61016760048036038101906101629190610ee7565b61060f565b005b610171610621565b60405161017e9190610a43565b60405180910390f35b61018f610627565b60405161019c9190610f35565b60405180910390f35b6101bf60048036038101906101ba9190610f50565b61064d565b005b6101c96106d3565b6040516101d69190610f9e565b60405180910390f35b6101e76106f9565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a627842306040518263ffffffff1660e01b81526004016102429190610ecc565b600060405180830381600087803b15801561025c57600080fd5b505af1158015610270573d6000803e3d6000fd5b50505050565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102aa6106f9565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ae050476040518163ffffffff1660e01b8152600401602060405180830381865afa158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b9190610fce565b600581905550565b600061034e85610780565b905083604001518114610396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038d90611058565b60405180910390fd5b60008460000151856020015186604001516040516020016103b993929190611099565b6040516020818303038152906040528051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637e4f7a8a868661041c86610807565b6040518463ffffffff1660e01b815260040161043a939291906111e1565b602060405180830381865afa158015610457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047b9190611252565b9050806104bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b4906112cb565b60405180910390fd5b60005b875181101561058b5760008882815181106104de576104dd6112eb565b5b60200260200101519050600660008260200151815260200190815260200160002060009054906101000a900460ff161561054d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054490611366565b60405180910390fd5b6001600660008360200151815260200190815260200160002060006101000a81548160ff0219169083151502179055505080806001019150506104c0565b5060005b87518110156105c8576105bb8882815181106105ae576105ad6112eb565b5b60200260200101516108b2565b808060010191505061058f565b5050505050505050565b6105da6106f9565b6105e4600061095e565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6106176106f9565b8060048190555050565b60045481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106556106f9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106c75760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016106be9190610ecc565b60405180910390fd5b6106d08161095e565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610701610a22565b73ffffffffffffffffffffffffffffffffffffffff1661071f6105e6565b73ffffffffffffffffffffffffffffffffffffffff161461077e57610742610a22565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016107759190610ecc565b60405180910390fd5b565b6000806000801b905060005b83518110156107fd5760008482815181106107aa576107a96112eb565b5b60200260200101519050828160000151826020015183604001516040516020016107d794939291906113ef565b60405160208183030381529060405280519060200120925050808060010191505061078c565b5080915050919050565b60606000600867ffffffffffffffff81111561082657610825610b22565b5b6040519080825280602002602001820160405280156108545781602001602082028036833780820191505090505b50905060005b60088110156108a857602081610870919061146c565b84901b60e01c63ffffffff1682828151811061088f5761088e6112eb565b5b602002602001018181525050808060010191505061085a565b5080915050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826000015183604001516040518363ffffffff1660e01b81526004016109179291906114bd565b6020604051808303816000875af1158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a9190611252565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b610a3d81610a2a565b82525050565b6000602082019050610a586000830184610a34565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610aa3610a9e610a9984610a5e565b610a7e565b610a5e565b9050919050565b6000610ab582610a88565b9050919050565b6000610ac782610aaa565b9050919050565b610ad781610abc565b82525050565b6000602082019050610af26000830184610ace565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b5a82610b11565b810181811067ffffffffffffffff82111715610b7957610b78610b22565b5b80604052505050565b6000610b8c610af8565b9050610b988282610b51565b919050565b600067ffffffffffffffff821115610bb857610bb7610b22565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000610bde82610a5e565b9050919050565b610bee81610bd3565b8114610bf957600080fd5b50565b600081359050610c0b81610be5565b92915050565b610c1a81610a2a565b8114610c2557600080fd5b50565b600081359050610c3781610c11565b92915050565b6000819050919050565b610c5081610c3d565b8114610c5b57600080fd5b50565b600081359050610c6d81610c47565b92915050565b600060608284031215610c8957610c88610bce565b5b610c936060610b82565b90506000610ca384828501610bfc565b6000830152506020610cb784828501610c28565b6020830152506040610ccb84828501610c5e565b60408301525092915050565b6000610cea610ce584610b9d565b610b82565b90508083825260208201905060608402830185811115610d0d57610d0c610bc9565b5b835b81811015610d365780610d228882610c73565b845260208401935050606081019050610d0f565b5050509392505050565b600082601f830112610d5557610d54610b0c565b5b8135610d65848260208601610cd7565b91505092915050565b600060608284031215610d8457610d83610bce565b5b610d8e6060610b82565b90506000610d9e84828501610c28565b6000830152506020610db284828501610c28565b6020830152506040610dc684828501610c28565b60408301525092915050565b600080fd5b60008083601f840112610ded57610dec610b0c565b5b8235905067ffffffffffffffff811115610e0a57610e09610dd2565b5b602083019150836001820283011115610e2657610e25610bc9565b5b9250929050565b60008060008060a08587031215610e4757610e46610b02565b5b600085013567ffffffffffffffff811115610e6557610e64610b07565b5b610e7187828801610d40565b9450506020610e8287828801610d6e565b935050608085013567ffffffffffffffff811115610ea357610ea2610b07565b5b610eaf87828801610dd7565b925092505092959194509250565b610ec681610bd3565b82525050565b6000602082019050610ee16000830184610ebd565b92915050565b600060208284031215610efd57610efc610b02565b5b6000610f0b84828501610c28565b91505092915050565b6000610f1f82610aaa565b9050919050565b610f2f81610f14565b82525050565b6000602082019050610f4a6000830184610f26565b92915050565b600060208284031215610f6657610f65610b02565b5b6000610f7484828501610bfc565b91505092915050565b6000610f8882610aaa565b9050919050565b610f9881610f7d565b82525050565b6000602082019050610fb36000830184610f8f565b92915050565b600081519050610fc881610c11565b92915050565b600060208284031215610fe457610fe3610b02565b5b6000610ff284828501610fb9565b91505092915050565b600082825260208201905092915050565b7f496e76616c6964206c61737420636c61696d2068617368000000000000000000600082015250565b6000611042601783610ffb565b915061104d8261100c565b602082019050919050565b6000602082019050818103600083015261107181611035565b9050919050565b6000819050919050565b61109361108e82610a2a565b611078565b82525050565b60006110a58286611082565b6020820191506110b58285611082565b6020820191506110c58284611082565b602082019150819050949350505050565b600082825260208201905092915050565b82818337600083830152505050565b600061110283856110d6565b935061110f8385846110e7565b61111883610b11565b840190509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61115881610c3d565b82525050565b600061116a838361114f565b60208301905092915050565b6000602082019050919050565b600061118e82611123565b611198818561112e565b93506111a38361113f565b8060005b838110156111d45781516111bb888261115e565b97506111c683611176565b9250506001810190506111a7565b5085935050505092915050565b600060408201905081810360008301526111fc8185876110f6565b905081810360208301526112108184611183565b9050949350505050565b60008115159050919050565b61122f8161121a565b811461123a57600080fd5b50565b60008151905061124c81611226565b92915050565b60006020828403121561126857611267610b02565b5b60006112768482850161123d565b91505092915050565b7f496e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b60006112b5600d83610ffb565b91506112c08261127f565b602082019050919050565b600060208201905081810360008301526112e4816112a8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e756c6c696669657220616c7265616479207573656400000000000000000000600082015250565b6000611350601683610ffb565b915061135b8261131a565b602082019050919050565b6000602082019050818103600083015261137f81611343565b9050919050565b60008160601b9050919050565b600061139e82611386565b9050919050565b60006113b082611393565b9050919050565b6113c86113c382610bd3565b6113a5565b82525050565b6000819050919050565b6113e96113e482610c3d565b6113ce565b82525050565b60006113fb8287611082565b60208201915061140b82866113b7565b60148201915061141b8285611082565b60208201915061142b82846113d8565b60208201915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061147782610c3d565b915061148283610c3d565b925082820261149081610c3d565b915082820484148315176114a7576114a661143d565b5b5092915050565b6114b781610c3d565b82525050565b60006040820190506114d26000830185610ebd565b6114df60208301846114ae565b939250505056fea26469706673582212203fd48cd9b9fa7ed0ba5f5097bbefafcc37eb60a68a95e2a8181ad1107aebc9b564736f6c63430008180033";

type MinterV0ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MinterV0ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MinterV0__factory extends ContractFactory {
  constructor(...args: MinterV0ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    plonkVerifier_: AddressLike,
    token_: AddressLike,
    int0_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      plonkVerifier_,
      token_,
      int0_,
      overrides || {}
    );
  }
  override deploy(
    plonkVerifier_: AddressLike,
    token_: AddressLike,
    int0_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      plonkVerifier_,
      token_,
      int0_,
      overrides || {}
    ) as Promise<
      MinterV0 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MinterV0__factory {
    return super.connect(runner) as MinterV0__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MinterV0Interface {
    return new Interface(_abi) as MinterV0Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MinterV0 {
    return new Contract(address, _abi, runner) as unknown as MinterV0;
  }
}
