/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Minter, MinterInterface } from "../../contracts/Minter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "plonkVerifier_",
        type: "address",
      },
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "amountMultiplier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct Minter.MintClaim[]",
        name: "claims",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "depositTreeRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "eligibleTreeRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "lastClaimHash",
            type: "bytes32",
          },
        ],
        internalType: "struct Minter.ClaimPublicInputs",
        name: "publicInputs",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "claimTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositTreeRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "eligibleTreeRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountMultiplier_",
        type: "uint256",
      },
    ],
    name: "setAmountMultiplier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "depositTreeRoot_",
        type: "bytes32",
      },
    ],
    name: "setDepositTreeRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "eligibleTreeRoot_",
        type: "bytes32",
      },
    ],
    name: "setEligibleTreeRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IINTMAXToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract IPlonkVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052670de0b6b3a76400006005553480156200001d57600080fd5b50604051620017a6380380620017a6833981810160405281019062000043919062000283565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000b95760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000b09190620002db565b60405180910390fd5b620000ca816200015560201b60201c565b5081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620002f8565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200024b826200021e565b9050919050565b6200025d816200023e565b81146200026957600080fd5b50565b6000815190506200027d8162000252565b92915050565b600080604083850312156200029d576200029c62000219565b5b6000620002ad858286016200026c565b9250506020620002c0858286016200026c565b9150509250929050565b620002d5816200023e565b82525050565b6000602082019050620002f26000830184620002ca565b92915050565b61149e80620003086000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80637e34c9a71161008c578063b51d6ebc11610066578063b51d6ebc146101b3578063def496a8146101cf578063f2fde38b146101ed578063fc0c546a14610209576100ce565b80637e34c9a71461015b5780638b31ddfc146101775780638da5cb5b14610195576100ce565b8062831864146100d35780631249c58b146100ef5780631d9a07b9146100f95780632b7ac3f314610117578063550ca5f814610135578063715018a614610151575b600080fd5b6100ed60048036038101906100e89190610a2c565b610227565b005b6100f7610239565b005b6101016102d0565b60405161010e9190610a72565b60405180910390f35b61011f6102d6565b60405161012c9190610b0c565b60405180910390f35b61014f600480360381019061014a9190610e12565b6102fc565b005b61015961058b565b005b61017560048036038101906101709190610ea2565b61059f565b005b61017f6105b1565b60405161018c9190610ede565b60405180910390f35b61019d6105b7565b6040516101aa9190610f08565b60405180910390f35b6101cd60048036038101906101c89190610ea2565b6105e0565b005b6101d76105f2565b6040516101e49190610a72565b60405180910390f35b61020760048036038101906102029190610f23565b6105f8565b005b61021161067e565b60405161021e9190610f71565b60405180910390f35b61022f6106a4565b8060058190555050565b6102416106a4565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a627842306040518263ffffffff1660e01b815260040161029c9190610f08565b600060405180830381600087803b1580156102b657600080fd5b505af11580156102ca573d6000803e3d6000fd5b50505050565b60045481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006103078561072b565b90508360400151811461034f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034690610fe9565b60405180910390fd5b60008460000151856020015186604001516040516020016103729392919061102a565b6040516020818303038152906040528051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637e4f7a8a86866103d5866107b2565b6040518463ffffffff1660e01b81526004016103f393929190611172565b602060405180830381865afa158015610410573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043491906111e3565b905080610476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046d9061125c565b60405180910390fd5b60005b87518110156105445760008882815181106104975761049661127c565b5b60200260200101519050600660008260200151815260200190815260200160002060009054906101000a900460ff1615610506576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fd906112f7565b60405180910390fd5b6001600660008360200151815260200190815260200160002060006101000a81548160ff021916908315150217905550508080600101915050610479565b5060005b8751811015610581576105748882815181106105675761056661127c565b5b602002602001015161085d565b8080600101915050610548565b5050505050505050565b6105936106a4565b61059d6000610916565b565b6105a76106a4565b8060048190555050565b60055481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105e86106a4565b8060038190555050565b60035481565b6106006106a4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106725760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016106699190610f08565b60405180910390fd5b61067b81610916565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106ac6109da565b73ffffffffffffffffffffffffffffffffffffffff166106ca6105b7565b73ffffffffffffffffffffffffffffffffffffffff1614610729576106ed6109da565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016107209190610f08565b60405180910390fd5b565b6000806000801b905060005b83518110156107a85760008482815181106107555761075461127c565b5b60200260200101519050828160000151826020015183604001516040516020016107829493929190611380565b604051602081830303815290604052805190602001209250508080600101915050610737565b5080915050919050565b60606000600867ffffffffffffffff8111156107d1576107d0610b3d565b5b6040519080825280602002602001820160405280156107ff5781602001602082028036833780820191505090505b50905060005b60088110156108535760208161081b91906113fd565b84901b60e01c63ffffffff1682828151811061083a5761083961127c565b5b6020026020010181815250508080600101915050610805565b5080915050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826000015160055484604001516108b291906113fd565b6040518363ffffffff1660e01b81526004016108cf92919061143f565b6020604051808303816000875af11580156108ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091291906111e3565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610a09816109f6565b8114610a1457600080fd5b50565b600081359050610a2681610a00565b92915050565b600060208284031215610a4257610a416109ec565b5b6000610a5084828501610a17565b91505092915050565b6000819050919050565b610a6c81610a59565b82525050565b6000602082019050610a876000830184610a63565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ad2610acd610ac884610a8d565b610aad565b610a8d565b9050919050565b6000610ae482610ab7565b9050919050565b6000610af682610ad9565b9050919050565b610b0681610aeb565b82525050565b6000602082019050610b216000830184610afd565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b7582610b2c565b810181811067ffffffffffffffff82111715610b9457610b93610b3d565b5b80604052505050565b6000610ba76109e2565b9050610bb38282610b6c565b919050565b600067ffffffffffffffff821115610bd357610bd2610b3d565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000610bf982610a8d565b9050919050565b610c0981610bee565b8114610c1457600080fd5b50565b600081359050610c2681610c00565b92915050565b610c3581610a59565b8114610c4057600080fd5b50565b600081359050610c5281610c2c565b92915050565b600060608284031215610c6e57610c6d610be9565b5b610c786060610b9d565b90506000610c8884828501610c17565b6000830152506020610c9c84828501610c43565b6020830152506040610cb084828501610a17565b60408301525092915050565b6000610ccf610cca84610bb8565b610b9d565b90508083825260208201905060608402830185811115610cf257610cf1610be4565b5b835b81811015610d1b5780610d078882610c58565b845260208401935050606081019050610cf4565b5050509392505050565b600082601f830112610d3a57610d39610b27565b5b8135610d4a848260208601610cbc565b91505092915050565b600060608284031215610d6957610d68610be9565b5b610d736060610b9d565b90506000610d8384828501610c43565b6000830152506020610d9784828501610c43565b6020830152506040610dab84828501610c43565b60408301525092915050565b600080fd5b60008083601f840112610dd257610dd1610b27565b5b8235905067ffffffffffffffff811115610def57610dee610db7565b5b602083019150836001820283011115610e0b57610e0a610be4565b5b9250929050565b60008060008060a08587031215610e2c57610e2b6109ec565b5b600085013567ffffffffffffffff811115610e4a57610e496109f1565b5b610e5687828801610d25565b9450506020610e6787828801610d53565b935050608085013567ffffffffffffffff811115610e8857610e876109f1565b5b610e9487828801610dbc565b925092505092959194509250565b600060208284031215610eb857610eb76109ec565b5b6000610ec684828501610c43565b91505092915050565b610ed8816109f6565b82525050565b6000602082019050610ef36000830184610ecf565b92915050565b610f0281610bee565b82525050565b6000602082019050610f1d6000830184610ef9565b92915050565b600060208284031215610f3957610f386109ec565b5b6000610f4784828501610c17565b91505092915050565b6000610f5b82610ad9565b9050919050565b610f6b81610f50565b82525050565b6000602082019050610f866000830184610f62565b92915050565b600082825260208201905092915050565b7f496e76616c6964206c61737420636c61696d2068617368000000000000000000600082015250565b6000610fd3601783610f8c565b9150610fde82610f9d565b602082019050919050565b6000602082019050818103600083015261100281610fc6565b9050919050565b6000819050919050565b61102461101f82610a59565b611009565b82525050565b60006110368286611013565b6020820191506110468285611013565b6020820191506110568284611013565b602082019150819050949350505050565b600082825260208201905092915050565b82818337600083830152505050565b60006110938385611067565b93506110a0838584611078565b6110a983610b2c565b840190509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6110e9816109f6565b82525050565b60006110fb83836110e0565b60208301905092915050565b6000602082019050919050565b600061111f826110b4565b61112981856110bf565b9350611134836110d0565b8060005b8381101561116557815161114c88826110ef565b975061115783611107565b925050600181019050611138565b5085935050505092915050565b6000604082019050818103600083015261118d818587611087565b905081810360208301526111a18184611114565b9050949350505050565b60008115159050919050565b6111c0816111ab565b81146111cb57600080fd5b50565b6000815190506111dd816111b7565b92915050565b6000602082840312156111f9576111f86109ec565b5b6000611207848285016111ce565b91505092915050565b7f496e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b6000611246600d83610f8c565b915061125182611210565b602082019050919050565b6000602082019050818103600083015261127581611239565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e756c6c696669657220616c7265616479207573656400000000000000000000600082015250565b60006112e1601683610f8c565b91506112ec826112ab565b602082019050919050565b60006020820190508181036000830152611310816112d4565b9050919050565b60008160601b9050919050565b600061132f82611317565b9050919050565b600061134182611324565b9050919050565b61135961135482610bee565b611336565b82525050565b6000819050919050565b61137a611375826109f6565b61135f565b82525050565b600061138c8287611013565b60208201915061139c8286611348565b6014820191506113ac8285611013565b6020820191506113bc8284611369565b60208201915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611408826109f6565b9150611413836109f6565b9250828202611421816109f6565b91508282048414831517611438576114376113ce565b5b5092915050565b60006040820190506114546000830185610ef9565b6114616020830184610ecf565b939250505056fea264697066735822122068687319052538c03c6452e201c53538b8f59ea8a4ced0d7c0219569dc2365a364736f6c63430008180033";

type MinterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MinterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Minter__factory extends ContractFactory {
  constructor(...args: MinterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    plonkVerifier_: AddressLike,
    token_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(plonkVerifier_, token_, overrides || {});
  }
  override deploy(
    plonkVerifier_: AddressLike,
    token_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(plonkVerifier_, token_, overrides || {}) as Promise<
      Minter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Minter__factory {
    return super.connect(runner) as Minter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MinterInterface {
    return new Interface(_abi) as MinterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Minter {
    return new Contract(address, _abi, runner) as unknown as Minter;
  }
}
