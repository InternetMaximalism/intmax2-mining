/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Int0 {
  export type DepositLeafStruct = {
    pubkeySaltHash: BytesLike;
    tokenIndex: BigNumberish;
    amount: BigNumberish;
  };

  export type DepositLeafStructOutput = [
    pubkeySaltHash: string,
    tokenIndex: bigint,
    amount: bigint
  ] & { pubkeySaltHash: string; tokenIndex: bigint; amount: bigint };

  export type PublicInputsStruct = {
    depositRoot: BytesLike;
    nullifier: BytesLike;
    recipient: AddressLike;
    tokenIndex: BigNumberish;
    amount: BigNumberish;
  };

  export type PublicInputsStructOutput = [
    depositRoot: string,
    nullifier: string,
    recipient: string,
    tokenIndex: bigint,
    amount: bigint
  ] & {
    depositRoot: string;
    nullifier: string;
    recipient: string;
    tokenIndex: bigint;
    amount: bigint;
  };
}

export interface Int0Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "depositCount"
      | "depositRoots"
      | "getBranch"
      | "getDepositRoot"
      | "getLeafHash"
      | "getPublicInputsHash"
      | "leafIndex"
      | "nullifiers"
      | "owner"
      | "rescue"
      | "splitBytes32"
      | "verifierAddress"
      | "verifyMerkleProof"
      | "verifyProof"
      | "withdraw"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [Int0.DepositLeafStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositRoots",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getBranch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDepositRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLeafHash",
    values: [Int0.DepositLeafStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicInputsHash",
    values: [Int0.PublicInputsStruct]
  ): string;
  encodeFunctionData(functionFragment: "leafIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nullifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "rescue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "splitBytes32",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifierAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMerkleProof",
    values: [BytesLike, BytesLike[], BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [Int0.PublicInputsStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [Int0.PublicInputsStruct, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBranch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeafHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicInputsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leafIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nullifiers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "splitBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifierAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMerkleProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositedEvent {
  export type InputTuple = [
    leafIndex: BigNumberish,
    leafHash: BytesLike,
    pubkeySaltHash: BytesLike,
    tokenIndex: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    leafIndex: bigint,
    leafHash: string,
    pubkeySaltHash: string,
    tokenIndex: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    leafIndex: bigint;
    leafHash: string;
    pubkeySaltHash: string;
    tokenIndex: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Int0 extends BaseContract {
  connect(runner?: ContractRunner | null): Int0;
  waitForDeployment(): Promise<this>;

  interface: Int0Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [leaf: Int0.DepositLeafStruct],
    [void],
    "payable"
  >;

  depositCount: TypedContractMethod<[], [bigint], "view">;

  depositRoots: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  getBranch: TypedContractMethod<[], [string[]], "view">;

  getDepositRoot: TypedContractMethod<[], [string], "view">;

  getLeafHash: TypedContractMethod<
    [depositLeaf: Int0.DepositLeafStruct],
    [string],
    "view"
  >;

  getPublicInputsHash: TypedContractMethod<
    [publicInputs: Int0.PublicInputsStruct],
    [string],
    "view"
  >;

  leafIndex: TypedContractMethod<[], [bigint], "view">;

  nullifiers: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  rescue: TypedContractMethod<[], [void], "nonpayable">;

  splitBytes32: TypedContractMethod<[input: BytesLike], [bigint[]], "view">;

  verifierAddress: TypedContractMethod<[], [string], "view">;

  verifyMerkleProof: TypedContractMethod<
    [
      leafHash: BytesLike,
      smtProof: BytesLike[],
      index: BigNumberish,
      root: BytesLike
    ],
    [boolean],
    "view"
  >;

  verifyProof: TypedContractMethod<
    [pis: Int0.PublicInputsStruct, proof: BytesLike],
    [boolean],
    "view"
  >;

  withdraw: TypedContractMethod<
    [publicInputs: Int0.PublicInputsStruct, proof: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[leaf: Int0.DepositLeafStruct], [void], "payable">;
  getFunction(
    nameOrSignature: "depositCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositRoots"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBranch"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDepositRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLeafHash"
  ): TypedContractMethod<
    [depositLeaf: Int0.DepositLeafStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPublicInputsHash"
  ): TypedContractMethod<
    [publicInputs: Int0.PublicInputsStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "leafIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nullifiers"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rescue"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "splitBytes32"
  ): TypedContractMethod<[input: BytesLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "verifierAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyMerkleProof"
  ): TypedContractMethod<
    [
      leafHash: BytesLike,
      smtProof: BytesLike[],
      index: BigNumberish,
      root: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<
    [pis: Int0.PublicInputsStruct, proof: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [publicInputs: Int0.PublicInputsStruct, proof: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;

  filters: {
    "Deposited(uint32,bytes32,bytes32,uint32,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
  };
}
